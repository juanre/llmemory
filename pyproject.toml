[project]
name = "llmemory"
version = "0.4.0"
description = "High-performance document memory system with vector search capabilities for Python applications"
readme = "README.md"
license = {text = "MIT"}
authors = [
    { name = "Juan Reyero", email = "juan@juanreyero.com" }
]
maintainers = [
    { name = "Juan Reyero", email = "juan@juanreyero.com" }
]
keywords = ["vector-search", "embeddings", "document-search", "semantic-search", "postgresql", "pgvector", "nlp", "information-retrieval"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: AsyncIO",
    "Topic :: Database",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24.0",
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "tiktoken>=0.5.0",
    "asyncpg>=0.30.0",
    "fast-langdetect>=0.2.0",
    "sentence-transformers>=4.1.0",
    "pgdbm",
]

[project.optional-dependencies]
cache = [
    "redis>=6.2.0",
]
monitoring = [
    "prometheus-client>=0.22.1",
]
local = [
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",
]
reranker-local = [
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",
]
bench = [
    "beir>=2.0.0",
    "scikit-learn>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/juanre/llmemory"
Documentation = "https://github.com/juanre/llmemory"
Repository = "https://github.com/juanre/llmemory"
Changelog = "https://github.com/juanre/llmemory/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.0.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["llmemory"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
namespace_packages = true
show_error_codes = true
show_error_context = true
pretty = true

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["llmemory"]

[tool.coverage.run]
branch = true
source = ["src/llmemory"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.uv.sources]
pgdbm = { path = "../pgdbm" }
